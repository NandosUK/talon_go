/*
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`
 *
 * API version:
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package talon

import (
	"bytes"
	"encoding/json"
)

// ScimPatchOperation Patch operation that is used to update the information.
type ScimPatchOperation struct {
	// The method that should be used in the operation.
	Op string `json:"op"`
	// The path specifying the attribute that should be updated.
	Path *string `json:"path,omitempty"`
	// The value that should be updated. Required if `op` is `add` or `replace`.
	Value *string `json:"value,omitempty"`
}

// GetOp returns the Op field value
func (o *ScimPatchOperation) GetOp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Op
}

// SetOp sets field value
func (o *ScimPatchOperation) SetOp(v string) {
	o.Op = v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *ScimPatchOperation) GetPath() string {
	if o == nil || o.Path == nil {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *ScimPatchOperation) GetPathOk() (string, bool) {
	if o == nil || o.Path == nil {
		var ret string
		return ret, false
	}
	return *o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *ScimPatchOperation) HasPath() bool {
	if o != nil && o.Path != nil {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *ScimPatchOperation) SetPath(v string) {
	o.Path = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ScimPatchOperation) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *ScimPatchOperation) GetValueOk() (string, bool) {
	if o == nil || o.Value == nil {
		var ret string
		return ret, false
	}
	return *o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ScimPatchOperation) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *ScimPatchOperation) SetValue(v string) {
	o.Value = &v
}

type NullableScimPatchOperation struct {
	Value        ScimPatchOperation
	ExplicitNull bool
}

func (v NullableScimPatchOperation) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableScimPatchOperation) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
